CSE 331 Homework 4.  Answers to written questions.
Edit this file to supply your answers.

Name:  Anina Harriott

Problem 0.

(a) r = p * q:
        set r = 0 (a polynomial)
        {Inv: r = q*p_0 + q*p_1 + ... + q*p_n-1, where p_n is the nth term in p}
        for each term, t_p, in p:
            set s = 0 (a polynomial)
            {Inv: s = t_p*q_0 + t_p*q_1 + ... + t_p*q_n-1, where q_n is the nth term in q}
            for each term, t_q, in q:
                multiply the coefficients of t_p and t_q
                add the exponents of t_p and t_q
                use new coefficient and new exponent to make a new term and add that to s
            use polynomial addition to add s to r (will condense like terms)

     DEFINITION OF ADDITION OF TERM AND POLYNOMIAL
     r = p + t_0:
        set r = p
        t_0 = the term
        t_r = first term in r
        while term t_r in r has an exponent > the exponent of t_0:
            increment t_r so that it equals the next term in r
        if t_r has the same exponent as t_0:
            then replace t_r with the sum of t_r and t_0
            else insert t_0 to r as a new term

(b) q = u / v:
        set q = 0
        set u_change = u
        set t_u = highest degree term of u_change
        set t_v = highest degree term of v
        {Inv: q = u_0/t_v + u_1/t_v + ... + u_n-1/t_v, where u_n is the nth term in u}
        while the highest degree of v is <= the highest degree of u_change:
            set t_coefficient = 0
            divide the coefficient of t_u_change by that of t_v and the result is set to t_coefficient
            subtract the exponent of t_v from the exponent of t_u_change and set as t_exponent
            set t_temp = a new polynomial term with t_coefficient as its coefficient and t_exponent as its exponent
            add t_temp to q
            set v_temp = multiply t_temp by v
            set u_change = u_change - v_temp

    DEFINITION OF POLYNOMIAL SUBTRACTION
    r = p - q:
        set r = p by making a term-by-term copy of all terms in q to r
        {Inv: r = p - q_0 - q_1 - ... - q_i-1, where q_i is the ith term in q}
        for each term, t_q, in q:
            if any term, t_r, in r has the same degree as t_q,
                then replace t_r in r with the difference of t_q and t_r
                else insert t_q into r as a new negative term

    DEFINITION OF MULTIPLICATION WITH A TERM AND A POLYNOMIAL
    r = t * p:
        set r = p by making a term-by-term copy of all terms in p to r
        {Inv: r = p_0*t + p_1*t + ... + p_n-1*t, where p_n is the nth term in p}
        for each term, t_r, in r:
            multiply term t by t_r

(c) Example: (x^3+x-1) / (x+1) = x^2-x+2

    u = (x^3+x-1)
    v = (x+1)
    q = 0
    set u_change = u
    t_u = x^3
    t_v = x
    while the highest degree of v is <= the highest degree of u_change:

        ITERATION 1: u_change = (x^3+x-1), v = (x+1), q = 0, t_u_change = x^3, t_v = x
        (loop condition IS satisfied, degree of t_v <= degree of t_u_change --> 1 <= 3)
        [divide the coefficient of t_u_change by that of t_v and the result is set to t_coefficient] 1/1 = 1 = t_coefficient
        [subtract the exponent of t_v from the exponent of t_u_change and set as t_exponent] t_exponent = 3 - 1 = 2
        [set t_temp = a new polynomial term with t_coefficient as its coefficient and t_exponent as its exponent] t_temp = x^2
        [add t_temp to q] q = 0 + x^2 => q = x^2
        [set v_temp = multiply t_temp by v] v_temp = x^2 * (x+1) => v_temp = (x^3+x^2)
        [set u_change = u_change - v_temp] u_change = (x^3+x-1) - (x^3+x^2) => u_change = (-x^2+x-1)

        ITERATION 2: u_change = (-x^2+x-1), v = (x+1), q = x^2, t_u_change = -x^2, t_v = x
        (loop condition IS satisfied, degree of t_v <= degree of t_u_change --> 1 <= 2)
        [divide the coefficient of t_u_change by that of t_v and the result is set to t_coefficient] -1/1 = -1 = t_coefficient
        [subtract the exponent of t_v from the exponent of t_u_change and set as t_exponent] t_exponent = 2 - 1 = 1
        [set t_temp = a new polynomial term with t_coefficient as its coefficient and t_exponent as its exponent] t_temp = -x^1 = -x
        [add t_temp to q] q = x^2 + -x => q = x^2-x
        [set v_temp = multiply t_temp by v] v_temp = -x * (x+1) => v_temp = (-x^2-x)
        [set u_change = u_change - v_temp] u_change = (-x^2+x-1) - (-x^2-x) => u_change = (2x-1)

        ITERATION 3: u_change = (2x-1), v = (x+1), q = x^2-x, t_u_change = 2x, t_v = x
        (loop condition IS satisfied, degree of t_v <= degree of t_u_change --> 1 <= 1)
        [divide the coefficient of t_u_change by that of t_v and the result is set to t_coefficient] 2/1 = 2 = t_coefficient
        [subtract the exponent of t_v from the exponent of t_u_change and set as t_exponent] t_exponent = 1 - 1 = 0
        [set t_temp = a new polynomial term with t_coefficient as its coefficient and t_exponent as its exponent] t_temp = 2x^0 = 2
        [add t_temp to q] q = x^2-x+2
        [set v_temp = multiply t_temp by v] v_temp = 2*(x+1) => v_temp = 2x+2
        [set u_change = u_change - v_temp] u_change = (2x-1) - (2x+2) => u_change = (-3)

        ITERATION 4: u_change = (-3), v = (x+1), q = x^2-x+2, t_u_change = -3, t_v = x
        (loop condition NOT satisfied, degree of t_v !<= degree of t_u_change --> 1 !<= 0)

        Done: q = x^2-x+2

Problem 1.

(a) The constructor would no longer need to reduce the numerator and denominator, checkRep should no longer check for
    lowest form. toString, add, sub, mul, and div would have to reduce the fractions before operations, but not after.
    This would create repeated reducing of fractions when running operations on them, and would make the code less clear.

(b) This fails to meet the specification of the methods because the methods are supposed to return something equivalent
    to this modified by something, but instead you are changing this and returning this, which by changing it the specification
    becomes incorrect. Also, the methods don't specify that they modify anything, so the new implementation would break the
    spec that way. Additionally, the class spec says that RatNum is immutable, so changing the fields of this would break that.

(c) checkRep only needs to be called at the end of constructors because the class RatNum is supposed to be immutable.
    In all the other methods the fields shouldn't be changed, which means the representation invariant could only change
    in the constructors, so if it is satisfied at the end of the constructor then it should always be satisfied.

Problem 2.

(a) I only included a call to checkRep at the end of the constructor. This is because the rep invariant applies to the
    current state of the object, and since the spec describes RatTerm as immutable, the constructor is the only thing
    that is capable of altering its state or rep invariant. The rest of the class is written without editing the
    objects fields.

(b) The things that would have to change would be that the constructor no longer needs a sepcial case for when the RatTerm
    is equal to zero. toString?

(c)


Problem 3.


Problem 5.
